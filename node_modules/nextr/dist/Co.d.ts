import { Fn } from './types';
declare class Runner {
    fn: Function;
    ancestor: null | Runner;
    prevSibling: null | Runner;
    nextSibling: null | Runner;
    onError: undefined | Function;
    onSuccess: undefined | Function;
    onFinish: undefined | Function;
    constructor({ fn, ancestor, onError, onSuccess, onFinish, }: {
        fn: Function;
        ancestor: null | Runner;
        onError?: Function;
        onSuccess?: Function;
        onFinish?: Function;
    });
    run(options: any[]): void;
    setPrevSibling(runner: Runner): void;
    setNextSibling(runner: Runner): void;
    upstream(options: any[]): void;
}
declare class Co {
    current: null | Runner;
    ancestor: null | Runner;
    ctx: object | Function;
    constructor(options?: {
        ctx: object;
    });
    useFn(fn: Function, ancestor: null | Runner): void;
    /**
     *
     * @param fn copy middleware function if fn is a co object.
     */
    private useOne;
    /**
     *
     * @param args could be array of function or Co object. When arg is a Co object,
     * its middleware functions will be copied to new Co object.
     */
    use(...args: (Fn | Co)[]): Co;
    start(...args: any[]): object;
}
export default Co;
